V0 INSTRUCTION SET ARCHITECTURE
-------------------------------

Instructions are represented as 32-bit parcels with an optional 32-bit immediate
argument parcel following them. The format of the instruction parcel is as
follows.

FLAGS-Bits
----------

These bits are located in the code-field of the instruction.

ID	Description		Bit
--	-----------		---

BYTE	byte-size operation	12
HALF	half-word operation	13
IMM	immediate argument	14
UNSG	unsigned operation	15

Register IDs
------------

Register #1 (source) ID is stored in the bits [0:5] of the parm-field of the
instruction, whereas register ID #2 (destination) is in the bits [6:11].

MODE-Bits
---------

These bits are the bits [13:15] in the parm-field of the instruction.

Bit	Description
---	-----------
13	PRIV-bit, i.e. instruction requires system mode [ring 0] of operation
14	ATOM-bit, the instruction performs a bus-lock for the operation when due
15	VAL-bit, the opcode has an embedded signed 15-bit argument

ADR-Bits
--------

These bits are the bits [11:12] in the parm-field of the instruction.

Value	Description
-----	-----------
00	no address; register arguments only
01	register address; base address in register
10	direct address; no base register
11	indexed address; base register + offset (register or immediate)

Register File
-------------

General Purpose Registers
-------------------------

R0	zero register - reads return zero, writes are ignored

Caller-Save/Function Argument Registers
---------------------------------------

R1	first function argument, function return value
R2	second function argument, second function return value
R3	third function argument
R4	fourth function argument
R5	fifth function argument
R6	sixth function argument
R7	seventh function argument

Callee-Save/Scratch Registers
-----------------------------

R8	first scratch register
R9	second  scratch register
R10	third scratch register
R11	fourth scratch register
R12	fifth scratch register
R13	sixth scratch register
R14	seventh scratch register
R15	eighth scratch register

Special Registers
-----------------

ID	Description		Contents
--	-----------		--------

PC	program counter		program counter, instruction pointer
LR	link register		return address back to caller
FP	frame pointer		function stack-frame address
SP	stack pointer		current stack pointer
MSW	machine status word	processor state flags
WC	task register		ID, status, flags
IM	interrupt mask		1-bits for masked interrupts, 0 for enabled
IOM	I/O map register	I/O descriptor table address
IOD	I/O descriptor register	current I/O descriptor base address + index
IV	interrupt vector	interrupt descriptor table address
PD	page directory		page structure base address + limit
MFR	machine feature word	flags for features present
TCB	thread context base	thread context table base address
BLO	bound range low limit
BHI	bound range high limit
TSC	timestamp counter	64-bit timestamp/cycle counter

MSW Register Bits
-----------------

ID	Description		Bits
--	-----------		---

ZF	zero/equal		0
SF	signed result		1
LT	less than		2
GT	greater than		3
CF	carry/borrow		4
OF	overflow		5
IF	interrupts enabled	6
RF	ring (0 - system)	7
TID	thread ID 		[8:15]

MSW/MFR Register Bits
---------------------

ID	Description		Bit
--	-----------		---

MP	multiprocessor		31
PG	paging			30
IO	I/O permission control	29
FP	floating-point unit	28
FM	fixed-point unit	27
GP	graphics unit		26
DP	digital signal unit	25
MD	SIMD unit      		24
VP	vector unit		23

Notes
-----

The ID-field is the hardware thread ID. The control block, i.e. execution
context of the thread can be found at the address

	TCB + ID * TCBSIZE

where TCBSIZE is the size of the processor thread control block

Instruction Operands
--------------------

R    register operand
I    immediate operand following opcode
ADR  memory address formed after one of the addressing modes

Addressing Modes
----------------

no address	        register arguments only
register address	base address in register
indexed address		immediate index/offset or direct address

Addressing Examples
-------------------

inc	%r1, %r2	; no address, registers only
jmp	*%r1 		; register address
ldr	4(%sp), %r1	; register + index
ldr	trapvec, %r1	; indexed/direct address

Opcode Format
-------------

NOTE that opcodes are represented in little-endian format, i.e. lowest-
significant bit/byte first.

Field		Description		Bits
-----		-----------		----

OP		operation ID		0:7
UNIT		coprocessor ID		8:11
FLAGS		flag bits		12:15
REG1		argument 1		16:21
REG2		argument 2		22:27
MODE		mode bits		28:29
ADR		addressing mode		30:31

FLAGS-Field
-----------

These flags are the bits [12:15] of the instruction code-field.

UNSG		unsigned operation  	15
IMM		immediate operand	14
HALF		16-bit operation	13
BYTE		8-bit operation		12

MODE-Field
----------

These flags are the bits [12:13] of the instruction parm-field.

ATOM  	    	bus-lock operation	13
PRIV		system/ring 0 operation	12

Instruction Set Reference
-------------------------
MNEMONIC	CODE	ARGUMENTS	MODE	BRIEF
--------	----	---------	----	-----
LOGIC-UNIT
----------
RI1		source register or immediate
R2		destination register
----
NOT		0x00	R1		----	logical negation
AND		0x01	RI1, R2		----	logical AND
IOR		0x02	RI1, R2		----	logical inclusive OR
XOR		0x03	RI1, R2		----	logical exclusive OR
SHIFT UNIT
----------
RV1		shift count in register or opcode
R2		destination register
----
SHL		0x00	RV1, R2
SHR		0x01	RV1, R2
SAR		0x02	RV1, R2
----		0x03
ROL		0x04	RV1, R2
ROR		0x05	RV1, R2
----		0x06
----		0x07
Fused Instructions
------------------
V		shift count in opcode
RI1		increment or mask
R2		destination register
----
SLA		0x08	V, RI1, R2
SRA		0x09	V, RI1, R2
SLM		0x0a	V, RI1, R2
SRM		0x0b	V, RI1, R2
ADDER UNIT
----------
INC		0x00	R1	----	increment by one
INCU			R1	----	unsigned increment by one
DEC		0x01	R1	----	decrement by one
DECU			R1	----	unsigned decrement by one
ADD		0x02	RI1, R2	----	addition
ADDU			RI1, R2	----	unsigned addition
ADC		0x03	RI1, R2	----	addition with carry
ADCU			RI1, R2	----	unsigned addition with carry
SUB		0x04	RI1, R2	----	subtraction
SUBU			RI1, R2	----	unsigned subtraction
SBC		0x05	RI1, R2	----	subtraction with borrow
SBCU			RI1, R2	----	unsigned subtraction with borrow
CMP		0x06	RI1, R2	----	compare (subtract and set MSW)
CMPU			RI1, R2	----	unsigned compare
MULTI UNIT
----------
MUL		0x00	RI1, R2	----	multiplication
MULU			RI1, R2	----	unsigned multiplication
DIV		0x01	RI1, R2	----	division
DIVU			RI1, R2	----	unsigned division
REM		0x02	RI1, R2	----	remainder
REMU			RI1, R2	----	unsigned remainder
RPC		0x03	RI1, R2	----	reciprocal
RPCU			RI1, R2	----	unsigned reciprocal
MLH		0x04	RI1, R2	----	multiplication, high result
MLHU			     	----	unsigned multiplication, high result
BIT UNIT
--------
SEX		0x00	R1	----	sign extend
ZEX		0x01	R1	----	zero extend
NEG		0x02	R1	----	arithmetic negation
SWP		0x03	R1	----	swap byte order
Miscellaneous Instructions
-------------------------
PAR		0x04	R1, R2	----	compute byte-parity, return 1 for odd
CLZ		0x05	R1, R2	----	count leading zero-bits
HAM		0x06	R1, R2	----	count Hamming weight (number of 1-bits)
----		0x07
BCD		0x08	RI1, R2	----	encode to binary-coded decimal
DCD		0x09	RI1, R2	----	decode from binary-coded decimal
CRC		0x0a	RI1, R2	----	compute IPv4 or ECC checksum (16/32-bit)
----		0x0b
HSH		0x0c	RI1, R2	----	hash source operand
HUN		0x0d	RI1, R2	----	unhash source operand
MEM UNIT
--------
LEA		0x00	A, R2	----	load effective address
LDR		0x01	RI1, R2	----	load register
STR		0x02	RI1, A	----	store register or immediate
Control Operations
------------------
IPG		0x03	A	----	invalidate page TLB-entry
CLR		0x04	A	----	clear cacheline dirty-bit
CPF		0x05	A	----	prefetch cacheline
CFL		0x06	A	----	flush [write out] cacheline
----		0x07
Memory Barriers
---------------
BAR		0x08		----	full memory barrier
BRD		0x09		----	memory read barrier
BWR		0x0a		----	memory write barrier
----		0x0b
Conditional Load and Store
--------------------------
CLD		0x0c		----	conditional load (see suffixes below)
CST		0x0d		----	conditional store
Conditions
----------
Code		MSW-Bits
----		--------
EQ		!ZF
NE		ZF
LT		!ZF && LT
LE		ZF || LT
GT		!ZF && !LT
GE		ZF || !LT
CF		CF
NC		!CF
OF		OF
NO		!OF
STACK UNIT
----------
PSH		0x00	R1	----	push register
POP		0x01	R1	----	pop register
PSM		0x02	R1, R2	----	push register range R1..R2
POM		0x03	R1, R2	----	pop register range R1..R2
ATOM UNIT
---------
Load and Store
--------------
LNK		0x00	A, R2	-A--	load linked
STC		0x01	R1, A	-A--	store conditional (if not modified)
BTC		0x02	RI1, A	-A--	bit test-and-clear
BTS		0x03	RI1, A	-A--	bit test-and-set
Add Operations
--------------
XADD		0x04	RI1, A	-A--	atomic fetch-and-add
XINC		0x05	A, RI2	-A--	atomic fetch-and-increment
XDEC		0x06	A, RI2	-A--	atomic fetch-and-decrement
----		0x07
Compare and Swap
----------------
R1		new value
R2		expected value
I		destination address
----
CAS		0x08	R1, R2, I	atomic compare and swap
CAS2		0x09	R1, R2, I
FLOW UNIT
---------
JMP		0x00	A	----	absolute unconditional jump
JMR		0x01	I, R	----	absolute relative jump to I(R)
BEQ		0x02	A  	----	branch if equal/zero
BZF				----
BNE		0x03	A	----	branch if not equal/zero
BNZ				----
BLT		0x04	A	----	branch if less than
BGE		0x05	A	----	branch if greater than or equal to
BLE		0x06	A	----	branch if less than or equal to
BGT		0x07	A	----	branch if greater than
BCF		0x08	A	----	branch if carry set
BNC		0x09	A	----	branch if carry not set
BOF		0x0a	A	----	branch if overflow set
BNO		0x0b	A	----	branch if overflow not set
Conditions
----------
- see under MEM-unit
SUBR UNIT
---------
CSF		0x00	I, A	----	fill register and stack frame
BEG		0x01	   	----	psh %fp; ldr %fp, %sp
CSR		0x02		----	call subroutine
FIN		0x03		----	subroutine epilogue (adjust stack)
SYS		0x04		----	enter system call
SRT		0x05		----	return from system call
THR		0x06		----	launch a thread
THX		0x07		----	terminate a thread
----		0x07
RET		0x08		----	return from subroutine
IRT		0x09		----	return from interrupt function
SYS UNIT
--------
HLT		0x00		----	halt system (wait for interrupt)
RST		0x01		----	reset system
WFE		0x02		----	wait for event (on wait channel)
SEV		0x03		----	signal event (on wait channel)
CLI		0x04		----	disable interrupts
STI		0x05		----	enable interrupts
----		0x06
----		0x07
INT		0x08		----	raise software interrupt
IO UNIT
-------
IOC		0x00		----	I/O command
IRD		0x01		----	I/O read operation
IWR		0x02		----	I/O write operation
ILD		0x03		----	load I/O register
IST		0x04		----	store I/O register
IOC Commands
------------
- TODO: ASYNC, DMA
PROBE_BUS
INIT_BUT
PROBE_DEV
INIT_DEV
READ_BYTE
READ_HALF
READ_WORD
WRITE_BYTE
WRITE_HALF
WRITE_WORD
READ_BLK
WRITE_BLK

